Routing in React JS 
-------
  using react-router-dom 


Routing in Next JS 
----------
  1. Page Router (Preferred)
  2. App Router (Newer)


localhost:3000
  pages/index.tsx 

localhost:3000/about
  pages/about/index.tsx

localhost:3000/careers
  pages/careers.tsx 

localhost:3000/contact-us
  pages/contact-us/index.tsx

localhost:3000/products/
  pages/products/index.tsx 

localhost:3000/products/1
localhost:3000/products/2
localhost:3000/products/45656
  pages/products/[productId].tsx     --> productId -- is URL Param

localhost:3000/employees/
  pages/employees/index.tsx 
localhost:3000/employees/new
  pages/employees/new.tsx 
localhost:3000/employees/list
  pages/employees/list.tsx 

localhost:3000/posts/
  pages/posts/index.tsx 

localhost:3000/posts/1
  pages/posts/[postId]/index.tsx 

localhost:3000/posts/1/comments
  pages/posts/[postId]/comments/index.tsx 
  
localhost:3000/posts/1/comments/1
  pages/posts/[postId]/comments/[commentId].tsx 

localhost:3000/posts/1/edit   [TODO]

localhost:3000/archives/2023/10/06
localhost:3000/archives/2022/05/31

Page Router 
----
  Static URLs [DONE]
  Dynamic URLs [DONE]
  URL Params [DONE]
  Query Params[DONE]

  Nested URLS [DONE]
  Slug with rest operator [DONE]
  Routing thru Program [DONE]
  Page Not Found [DONE]
  Catch-All URLs [DONE]
  
========


What to do for SEO?
 Page pre-rendering 

 req => 
  /products => 
    (return pre-rendered page) => 
      (then, hyderates with React code after loaded - so that app will become interactive)

    
------
2 Types of Pre-rendering 
  1. Static Generation: 
      The HTML is generated at build time and will be reused on each request.

  2. Server-side Rendering: 
      The HTML is generated on each request.


Static Generation
--------------
  * pre-generate a page with all the data prepared on the server side 
  * all done during build time (npm run build or next build)
  * pages are prepared ahead of time
  * can be cached by the server 

  Example: Refer products.tsx 
  
Let's build the project to see SSG html 
  npm start 

==========

Authentication
-----
  1. Session-Based 
  2. Token-Based 

  1. Session Based Authentication
       email, password 
       1. if valid 
            session id would be created and SAVED in server 
              server will send session id to the browser 
                browser should store in cookies 
                  (every subsequent req post-login)
                    browser should send the session id in cookies to the server 
                      (before sending further res to the client )
                        server will compare the session id coming from browser with the one saved 
                          if matches 
                            then, res will be sent to the browser 
                          else 
                            login again  

       2. else 
            login again with valid credentials 


      Disadvantages 
      ---
        Session ID should be maintained by the server 
        

  2. Token Based Authentication
      email, password 
       1. if valid 
          JSON Web Token (JWT) would be generated using some encryption on the back end side 
            server will not save it but will send JWT to the browser 
              browser should store in cookies/localStorage/sessionStorage
                (every subsequent req post-login)
                  browser should send the JWT in req header to the server 
                    (before sending further res to the client )
                      server will validate the JWT coming from browser by decoding
                        if valid
                          then, res will be sent to the browser 
                        else 
                          login again  

        2. else 
            login again with valid credentials 

---




  Token Based 
  -------
    1. local strategy / provider  
    -------
      localhost:3000/signup 
        email, password 
        email should be saved in db -- NOT password
        password should be encrypted and saved as salt and hash 
        we should ask the user verify the email by sending email verification email 

      localhost:3000/login 
        email, password 
        verify whether the user with such email is found in db 
        if yes, then decrypt the password using salt 
        regenerate the hash using the same salt 
        then, if saved hash is matching with regenerated hash -- user is valid
        then, send JWT Token 
      
      --- 
      Browser should save the JWT token in either cookies or local storage or session storage

      Every subsequent req to the server should carry the JWT token 
      backend, you need to verify whether the JWT is valid or not 


      localhost:3000/logout 
        remove the saved token from browser 

    2. third-party signin provider 






