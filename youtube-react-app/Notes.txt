Thinking in React 
---
  Step 0: Identify the number of components 


  Step 1: Break UI into component hierarchy 


Components 
-----
  * reusable block of code 
  
  1. Functional Components 
      1.1 Functional Components with Named Function 
      1.2 Functional Components with Anonymous Function
      1.3 Function Components with Arrow Function (RECOMMENDED)

      * before react v16.8, Functional components were called as stateless
      * these were also called as dumb components, prsentational components   
      * after react v16.8, Functional components can also have state 

  2. Class Components (NOT RECOMMENDED)
      * before react v16.8, class components were called as stateful components 
      * these were called as smart components / containers



JSX
----
  * tags must be closed
  * class attribute should become className 


Concepts 
-----
  Deep Dive into components 
    Data Binding 
    Cross Component Communication 
      1. Parent to Child Component Communication [DONE]
          using Props 

      2. Child to Parent Component Communication [TODO]
          using Props and Event, Event Handler

      3. Any to Any Component Communication
          3.1 using Context API 
          3.2 using Redux (third party framework)
    
    Props [DONE]
    Managing State [DONE]
    Events [DONE]
    Conditionals [DONE]
    Lists & Keys [DONE]
    Understanding Hooks 
    Routing [DONE]
    REST API calls [DONE]
    Styling 
  Build & Deployment 
  
Project Structure 
--------------
  src/
    components/ 
      Header/
      Footer/
      MenuList/
    pages/
      HomePage/
      AboutPage/
      ContactPage/

    
React Hooks 
========
  Rules of Hooks
  -------
  Hooks are JavaScript functions, but they impose two additional rules:
    1. Only call Hooks at the top level. Don't call Hooks inside loops, conditions, or nested functions.
    2. Only call Hooks from React function components. 
      Don't call Hooks from regular JavaScript functions. 
      (There is just one other valid place to call Hooks â€” your own custom Hooks.)

Single Page App
===================
  7 Characteristics
  ---------------
    1. Pages will not Refresh / Reload [DONE]
    2. URL should change [DONE]
    3. History should be maintained w/o page refresh [DONE]
    4. Header and Footer should NOT be loaded again and again [DONE]
    5. Main Section should show contextual updates [DONE]
    6. Active Menu should be set [TODO]
    7. Page Title should be changed [TODO]

Routing 
-----
  Step 0: Let's identify the menus, the matching url and components 

    Home       -- http://localhost:3000/                  HomePage 
    Users      -- http://localhost:3000/users             UsersPage
    About      -- http://localhost:3000/about             AboutPage
    Contact    -- http://localhost:3000/contact           ContactPage 

  Step 1: Let's setup the urls in menulist component  

  Step 2: Let's create the necessary components for the URLs 

  Step 3: npm i react-router-dom 

  Step 4: Config the routing in App comp 
  Step 5: Check the app. Pages will still refresh. Let's fix it. 
            in MenuList, replace a href with Link to

